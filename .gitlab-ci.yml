image: python:3.8

cache:
  key: vls-global
  paths:
    - bin

variables:
  CARGO_HOME: "$CI_PROJECT_DIR/.cache/cargo"
  VLS_REGISTRY: registry.gitlab.com/lightning-signer/validating-lightning-signer
  RUST_QEMU_NIGHTLY_VERSION: "nightly-1-84-2024-10-13"
  RUNNER_TAG: "saas-linux-large-amd64"

workflow:
  rules:
    # If the CI_PROJECT_NAMESPACE does not contain 'lightning-signer' (e.g., external MRs or forks),
    # set the RUNNER_TAG variable to use a saas-linux-medium-amd64 runner instead of the default saas-linux-large-amd64.
    - if: '$CI_PROJECT_NAMESPACE !~ /lightning-signer/'
      variables:
        RUNNER_TAG: "saas-linux-medium-amd64"
    - if: '$CI_MERGE_REQUEST_ID || $CI_COMMIT_BRANCH == "main"'
      when: always
    - when: never

before_script:
  - ls -al
  - mkdir -p bin

stages:
  - build
  - test

include:
  - template: Coverage-Fuzzing.gitlab-ci.yml

# Do this in a separate job, so that it gets cached with high probability
# later jobs can be flaky and cache is not written when a job fails.
get-bitcoin:
  stage: build
  cache:
    key: vls-bitcoin
    paths:
      - bin
  script:
    - ls -l bin
    - if [ ! -e bin/bitcoind ]; then
      wget --no-verbose https://bitcoin.org/bin/bitcoin-core-0.21.0/bitcoin-0.21.0-x86_64-linux-gnu.tar.gz &&
      echo da7766775e3f9c98d7a9145429f2be8297c2672fe5b118fd3dc2411fb48e0032  bitcoin-0.21.0-x86_64-linux-gnu.tar.gz | sha256sum -c &&
      tar xzf bitcoin-0.21.0-x86_64-linux-gnu.tar.gz &&
      mv bitcoin-0.21.0/bin/bitcoind bin/ &&
      rm -rf bitcoin-0.21.0 ;
      fi
  artifacts:
    paths:
      - bin/bitcoind
    expire_in: 1 week

fuzz-channel:
  tags: [ $RUNNER_TAG ]
  image: 'rustlang/rust:nightly'
  extends: .fuzz_base
  stage: test
  cache:
    key: vls-fuzz
    paths:
      - .cache/cargo
  needs:
    - rust-msrv
  timeout: 90m
  variables:
    RUNNER_SCRIPT_TIMEOUT: 80m
    COVFUZZ_USE_REGISTRY: "true"
    COVFUZZ_CORPUS_NAME: "channel"
  script:
    - export RUSTFLAGS="-Zallow-features=proc_macro_span"
    - cargo install cargo-fuzz || echo "cargo-fuzz install failed, likely due to licensing; continuing anyway"
    - cargo fuzz run channel -- -runs=0 || echo "Fuzzing skipped due to missing license or setup"
    - ./gitlab-cov-fuzz run --regression=$REGRESSION -- ./fuzz/target/x86_64-unknown-linux-gnu/release/channel || echo "gitlab-cov-fuzz not available; skipping"

random-scheduler:
  tags: [ $RUNNER_TAG ]
  stage: test
  image: rust:latest
  timeout: 5m
  cache:
    key: vls-random-scheduler
    paths:
      - .cache/cargo
  script:
    - apt-get update
    - apt-get install -y protobuf-compiler
    - cargo test --features shuttle test_node_with_random_operations

rust-latest:
  tags: [ $RUNNER_TAG ]
  stage: build
  image: rust:latest
  needs: [ "get-bitcoin" ]
  cache:
    key: vls-compile-latest
    paths:
      - bin
      - .cache/cargo
  script:
    - apt-get update
    - apt-get install -y protobuf-compiler
    # check if Cargo.lock is upto date
    - cargo update -w --locked
    # build command line binaries for integration tests
    - cargo build --bins
    - cargo test
    # ensure vls-persist builds with no-std
    - cargo build -p vls-persist --no-default-features --features no-std,kvv
    # run tests for otlp and observability crate
    - cargo test --package vls-proxy --lib --all-features -- util
    # ensure benches build
    - cargo bench --no-run
    # ensure vls crates build without developer flag
    - cargo build --release
    # build vlsd for integration tests
    - cargo build  --bin vlsd --features developer
    # build lnrod for integration tests
    - cd lnrod && cargo build
  artifacts:
    paths:
      - "target/debug/vlsd"
      - "lnrod/target/debug/lnrod"

rust-latest-extras:
  tags: [ $RUNNER_TAG ]
  stage: build
  image: rust:latest
  services:
    - docker:26.0.1-dind
  cache:
    key: vls-compile-latest-extras
    paths:
      - bin
      - .cache/cargo
  variables:
    DB_HOST: docker
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    # gitlab doesn't know how to wait for a service start https://gitlab.com/gitlab-org/gitlab/-/issues/24197
    - sleep 60;
  script:
    - apt-get update
    - apt-get install -y protobuf-compiler
    - cd lightning-storage-server
    - cargo update -w --locked
    - cargo build --all-features
    - cargo test
  artifacts:
    paths:
      - "target"

rust-msrv:
  tags: [ $RUNNER_TAG ]
  stage: build
  image: rust:1.74.0
  cache:
    key: vls-compile-1_74
    paths:
      - bin
      - .cache/cargo
  script:
    - apt-get update
    - apt-get install -y protobuf-compiler
    # build command line binaries for integration tests
    - cargo build --bins
    - cargo test --features test_cli

rust-msrv-lss:
  tags: [$RUNNER_TAG]
  stage: build
  image: rust:1.74.0
  cache:
    key: vls-compile-lss-1_74
    paths:
      - bin
      - .cache/cargo
  script:
    - apt-get update
    - apt-get install -y protobuf-compiler
    # only lss library should be msrv compatible
    - cd lightning-storage-server
    - cargo test -p lightning-storage-server

embedded:
  tags: [ saas-linux-medium-amd64 ]
  stage: build
  image: $VLS_REGISTRY/rust-qemu:$RUST_QEMU_NIGHTLY_VERSION
  cache:
    key: vls-embedded
    paths:
      - .cache/cargo
  variables:
    RUSTFLAGS: "-C link-arg=-Tlink.x"
    CARGO_TARGET_THUMBV7M_NONE_EABI_RUNNER: "qemu-system-arm -cpu cortex-m3 -machine mps2-an385 -nographic -semihosting-config enable=on,target=native -kernel"
  script:
    - cd embedded
    - cargo update -w --locked
    - cargo run --release --target thumbv7m-none-eabi

stm32:
  tags: [ saas-linux-medium-amd64 ]
  stage: build
  image: $VLS_REGISTRY/rust-qemu:$RUST_QEMU_NIGHTLY_VERSION
  cache:
    key: vls-stm32
    paths:
      - .cache/cargo
  script:
    - cd vls-signer-stm32
    - cargo update -w --locked
    - cargo build --features developer --release --bin demo_signer

wasm:
  tags: [ saas-linux-medium-amd64 ]
  stage: build
  image: $VLS_REGISTRY/rust-qemu:$RUST_QEMU_NIGHTLY_VERSION
  cache:
    key: vls-wasm
    paths:
      - .cache/cargo
      - wasm/target
  script:
    - cd wasm
    - cargo update -w --locked
    - wasm-pack test --firefox --headless && cargo test

coverage:
  tags: [ $RUNNER_TAG ]
  stage: build
  image: rust:latest
  needs: [ "get-bitcoin" ]
  cache:
    key: vls-coverage
    paths:
      - .cache/cargo
  coverage: '/^LINE_COVERAGE: \d+.\d+$/'
  script:
    - rustup show
    - cargo install cargo-llvm-cov
    - apt-get update
    - apt-get install -y protobuf-compiler
    - apt-get install -y jq
    - bin/bitcoind --regtest --daemon --rpcuser=user --rpcpassword=pass
    - (cd lightning-storage-server && cargo build --bin lssd && cargo run --bin lssd &)
    - sleep 2
    - ./scripts/run-llvm-cov --features system-test
    - bash <(curl -s https://codecov.io/bash) -f target/codecov.json -t "${CODECOV_TOKEN}"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: target/cobertura.xml
    expire_in: 1 week

cargo-audit:
  tags: [ saas-linux-medium-amd64 ]
  stage: build
  image: rust:latest
  cache:
    key: vls-audit
    paths:
      - .cache/cargo
  script:
    - cargo install cargo-deny --locked
    - cargo install cargo-audit --locked
    - cargo deny check
    - (cd lightning-storage-server && cargo audit)
    - (cd lnrod && cargo audit)

changelog:
  stage: build
  before_script:
    - git fetch origin main:main
  allow_failure: true
  script:
    - |
      if [ "$(git cat-file -p $CI_COMMIT_SHA | grep -c 'parent')" -gt 1 ]; then
        echo "This is a merge commit, don't require a changelog entry"
      elif [[ "$CI_COMMIT_REF_NAME" =~ release ]]; then
        echo "This is a release branch, don't require a changelog entry"
      else
        echo "This is not a merge commit."
        if git log 'main..HEAD' --pretty="%s%x09%b" | grep -q -E 'Changelog-(\S*): (.*)$'; then
          echo "Changelog commit message found.";
        else
          echo "Error: No Changelog commit message found.";
          exit 1;
        fi
      fi

cargo-fmt:
  tags: [ saas-linux-small-amd64 ]
  stage: build
  image: rust:latest
  cache:
    key: vls-fmt
    paths:
      - .cache/rustup
      - .cache/cargo
  variables:
    RUSTUP_HOME: "$CI_PROJECT_DIR/.cache/rustup"
  script:
    # rustup otherwise searches for its own binary in CARGO_HOME which fails
    - rustup set auto-self-update disable
    - rustup toolchain install nightly-2024-10-13
    - rustup component add --toolchain nightly-2024-10-13 rustfmt
    - ./scripts/fmt-all --check

cargo-mutants:
  tags: [ $RUNNER_TAG ]
  stage: build
  image: rust:latest
  needs: [ "get-bitcoin" ]
  cache:
    key: vls-mutants
    paths:
      - .cache/cargo
  script:
    - apt-get update
    - apt-get install -y protobuf-compiler
    - cargo install cargo-mutants
    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        echo "Running cargo-mutants incrementally for main branch"
        git fetch origin main
        git diff HEAD^ HEAD > git.diff
        cargo mutants --in-diff git.diff --package vls-core -vV
      else
        echo "Running cargo-mutants incrementally for non-main branch"
        git fetch origin main
        git diff origin/main > git.diff
        cargo mutants --in-diff git.diff --package vls-core -vV
      fi
  artifacts:
    when: always
    paths:
      - mutants.out/
    expire_in: 1 week

integration-lnrod-local:
  stage: test
  tags: [ $RUNNER_TAG ]
  needs: [ "rust-latest", "get-bitcoin" ]
  script:
    - export PATH="$PATH:`pwd`/bin"
    - apt-get update
    - apt-get install -y protobuf-compiler
    - cd lnrod
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip3 install -r requirements.txt
    - ./scripts/compile-proto
    - SIGNER=vls-local ./tests/integration-test.py
  artifacts:
    when: always
    paths:
      - test-output

integration-lnrod-grpc:
  stage: test
  tags: [ $RUNNER_TAG ]
  needs: [ "rust-latest", "get-bitcoin" ]
  script:
    - export PATH="$PATH:`pwd`/bin"
    - apt-get update
    - apt-get install -y protobuf-compiler
    - cd lnrod
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip3 install -r requirements.txt
    - ./scripts/compile-proto
    - SIGNER=vls-grpc  ./tests/integration-test.py
  artifacts:
    when: always
    paths:
      - lnrod/test-output

integration-lnrod-grpc-disaster-recovery:
  stage: test
  tags: [ $RUNNER_TAG ]
  needs: [ "rust-latest", "get-bitcoin" ]
  script:
    - export PATH="$PATH:`pwd`/bin"
    - apt-get update
    - apt-get install -y protobuf-compiler
    - cd lnrod
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip3 install -r requirements.txt
    - ./scripts/compile-proto
    - SIGNER=vls-grpc  ./tests/integration-test.py --test-disaster bitcoind
  artifacts:
    when: always
    paths:
      - lnrod/test-output
